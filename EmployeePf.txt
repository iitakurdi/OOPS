class Employee {
    protected String Emp_name;
    protected int Emp_id;
    protected String Address;
    protected String Mail_id;
    protected String Mobile_no;

    // Constructor
    public Employee(String Emp_name, int Emp_id, String Address, String Mail_id, String Mobile_no) {
        this.Emp_name = Emp_name;
        this.Emp_id = Emp_id;
        this.Address = Address;
        this.Mail_id = Mail_id;
        this.Mobile_no = Mobile_no;
    }

    // Method to display employee information
    public void displayInfo() {
        System.out.println("Employee Name: " + Emp_name);
        System.out.println("Employee ID: " + Emp_id);
        System.out.println("Address: " + Address);
        System.out.println("Email ID: " + Mail_id);
        System.out.println("Mobile Number: " + Mobile_no);
    }
}

// Base class for inherited classes with pay slip generation
abstract class SalaryBasedEmployee extends Employee {
    protected double BasicPay;

    // Constructor
    public SalaryBasedEmployee(String Emp_name, int Emp_id, String Address, String Mail_id, String Mobile_no, double BasicPay) {
        super(Emp_name, Emp_id, Address, Mail_id, Mobile_no);
        this.BasicPay = BasicPay;
    }

    // Method to calculate the gross and net salary
    protected double[] calculateSalary() {
        double DA = 0.97 * BasicPay; // Dearness Allowance
        double HRA = 0.10 * BasicPay; // House Rent Allowance
        double PF = 0.12 * BasicPay; // Provident Fund
        double staffClubFund = 0.001 * BasicPay; // Staff Club Fund

        double grossSalary = BasicPay + DA + HRA;
        double netSalary = grossSalary - PF - staffClubFund;

        return new double[]{grossSalary, netSalary};
    }

    // Method to generate pay slip
    public void generatePaySlip() {
        double[] salary = calculateSalary();
        double grossSalary = salary[0];
        double netSalary = salary[1];

        System.out.println("\nPay Slip for Employee ID: " + Emp_id);
        System.out.println("Employee Name: " + Emp_name);
        System.out.println("Basic Pay: $" + BasicPay);
        System.out.println("Gross Salary: $" + grossSalary);
        System.out.println("Net Salary: $" + netSalary);
    }
}

// Derived class for Programmer
class Programmer extends SalaryBasedEmployee {
    public Programmer(String Emp_name, int Emp_id, String Address, String Mail_id, String Mobile_no, double BasicPay) {
        super(Emp_name, Emp_id, Address, Mail_id, Mobile_no, BasicPay);
    }
}

// Derived class for Team Lead
class TeamLead extends SalaryBasedEmployee {
    public TeamLead(String Emp_name, int Emp_id, String Address, String Mail_id, String Mobile_no, double BasicPay) {
        super(Emp_name, Emp_id, Address, Mail_id, Mobile_no, BasicPay);
    }
}

// Derived class for Assistant Project Manager
class AssistantProjectManager extends SalaryBasedEmployee {
    public AssistantProjectManager(String Emp_name, int Emp_id, String Address, String Mail_id, String Mobile_no, double BasicPay) {
        super(Emp_name, Emp_id, Address, Mail_id, Mobile_no, BasicPay);
    }
}

// Derived class for Project Manager
class ProjectManager extends SalaryBasedEmployee {
    public ProjectManager(String Emp_name, int Emp_id, String Address, String Mail_id, String Mobile_no, double BasicPay) {
        super(Emp_name, Emp_id, Address, Mail_id, Mobile_no, BasicPay);
    }
}

// Test application
public class InheritanceCaseStudy {
    public static void main(String[] args) {
        // Create a Programmer
        Programmer programmer = new Programmer("Alice", 101, "123 Street", "alice@example.com", "123-456-7890", 5000);
        programmer.displayInfo();
        programmer.generatePaySlip();

        // Create a Team Lead
        TeamLead teamLead = new TeamLead("Bob", 102, "456 Avenue", "bob@example.com", "234-567-8901", 7000);
        teamLead.displayInfo();
        teamLead.generatePaySlip();

        // Create an Assistant Project Manager
        AssistantProjectManager assistantPM = new AssistantProjectManager("Charlie", 103, "789 Boulevard", "charlie@example.com", "345-678-9012", 9000);
        assistantPM.displayInfo();
        assistantPM.generatePaySlip();

        // Create a Project Manager
        ProjectManager projectManager = new ProjectManager("David", 104, "1010 Plaza", "david@example.com", "456-789-0123", 12000);
        projectManager.displayInfo();
        projectManager.generatePaySlip();
    }
}
