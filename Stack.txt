class Stack {
    private int[] stackArray;
    private int top;
    private int maxSize;

    // Constructor
    public Stack(int size) {
        maxSize = size;
        stackArray = new int[maxSize];
        top = -1;
    }

    // Push operation
    public void push(int value) {
        try {
            if (top == maxSize - 1) {
                throw new OverflowException("Stack Overflow: Cannot push element, stack is full.");
            }
            stackArray[++top] = value;
            System.out.println("Pushed " + value + " to the stack.");
        } catch (OverflowException e) {
            System.out.println(e.getMessage());
        }
    }

    // Pop operation
    public int pop() {
        try {
            if (top == -1) {
                throw new UnderflowException("Stack Underflow: Cannot pop element, stack is empty.");
            }
            int poppedValue = stackArray[top--];
            System.out.println("Popped " + poppedValue + " from the stack.");
            return poppedValue;
        } catch (UnderflowException e) {
            System.out.println(e.getMessage());
            return -1; // Return a default value indicating failure
        }
    }

    // Custom exception for Stack Overflow
    class OverflowException extends Exception {
        public OverflowException(String message) {
            super(message);
        }
    }

    // Custom exception for Stack Underflow
    class UnderflowException extends Exception {
        public UnderflowException(String message) {
            super(message);
        }
    }

    // Method to display the stack contents
    public void displayStack() {
        if (top == -1) {
            System.out.println("Stack is empty.");
            return;
        }
        System.out.print("Stack: ");
        for (int i = 0; i <= top; i++) {
            System.out.print(stackArray[i] + " ");
        }
        System.out.println();
    }
}

// Example usage
public class Main {
    public static void main(String[] args) {
        Stack stack = new Stack(5);
        stack.push(10);
        stack.push(20);
        stack.push(30);
        stack.push(40);
        stack.push(50);
        stack.push(60); // This should trigger a stack overflow
        stack.displayStack();

        stack.pop();
        stack.pop();
        stack.pop();
        stack.pop();
        stack.pop();
        stack.pop(); // This should trigger a stack underflow
        stack.displayStack();
    }
}