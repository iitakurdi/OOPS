// Define an interface for vehicles with common functionalities
interface Vehicle {
    void changeGear(int newGear);
    void speedUp(int increment);
    void applyBrakes(int decrement);
}

// Implementing the Vehicle interface in the Bicycle class
class Bicycle implements Vehicle {
    private int speed;
    private int gear;

    public Bicycle() {
        this.speed = 0;
        this.gear = 1;
    }

    @Override
    public void changeGear(int newGear) {
        this.gear = newGear;
        System.out.println("Bicycle gear changed to: " + newGear);
    }

    @Override
    public void speedUp(int increment) {
        this.speed += increment;
        System.out.println("Bicycle speed increased by: " + increment + " km/h");
    }

    @Override
    public void applyBrakes(int decrement) {
        this.speed -= decrement;
        System.out.println("Bicycle speed decreased by: " + decrement + " km/h");
    }

    // Display the current state of the bicycle
    public void display() {
        System.out.println("Bicycle state - Speed: " + speed + " km/h, Gear: " + gear);
    }
}

// Implementing the Vehicle interface in the Bike class
class Bike implements Vehicle {
    private int speed;
    private int gear;

    public Bike() {
        this.speed = 0;
        this.gear = 1;
    }

    @Override
    public void changeGear(int newGear) {
        this.gear = newGear;
        System.out.println("Bike gear changed to: " + newGear);
    }

    @Override
    public void speedUp(int increment) {
        this.speed += increment;
        System.out.println("Bike speed increased by: " + increment + " km/h");
    }

    @Override
    public void applyBrakes(int decrement) {
        this.speed -= decrement;
        System.out.println("Bike speed decreased by: " + decrement + " km/h");
    }

    // Display the current state of the bike
    public void display() {
        System.out.println("Bike state - Speed: " + speed + " km/h, Gear: " + gear);
    }
}

// Implementing the Vehicle interface in the Car class
class Car implements Vehicle {
    private int speed;
    private int gear;

    public Car() {
        this.speed = 0;
        this.gear = 1;
    }

    @Override
    public void changeGear(int newGear) {
        this.gear = newGear;
        System.out.println("Car gear changed to: " + newGear);
    }

    @Override
    public void speedUp(int increment) {
        this.speed += increment;
        System.out.println("Car speed increased by: " + increment + " km/h");
    }

    @Override
    public void applyBrakes(int decrement) {
        this.speed -= decrement;
        System.out.println("Car speed decreased by: " + decrement + " km/h");
    }

    // Display the current state of the car
    public void display() {
        System.out.println("Car state - Speed: " + speed + " km/h, Gear: " + gear);
    }
}

// Main class to test the implementation
public class VehicleTest {
    public static void main(String[] args) {
        // Create instances of bicycle, bike, and car
        Vehicle bicycle = new Bicycle();
        Vehicle bike = new Bike();
        Vehicle car = new Car();

        // Perform operations on the bicycle
        System.out.println("\nTesting Bicycle:");
        bicycle.changeGear(3);
        bicycle.speedUp(15);
        bicycle.applyBrakes(5);
        ((Bicycle) bicycle).display(); // Casting to call display method

        // Perform operations on the bike
        System.out.println("\nTesting Bike:");
        bike.changeGear(4);
        bike.speedUp(25);
        bike.applyBrakes(10);
        ((Bike) bike).display(); // Casting to call display method

        // Perform operations on the car
        System.out.println("\nTesting Car:");
        car.changeGear(5);
        car.speedUp(40);
        car.applyBrakes(20);
        ((Car) car).display(); // Casting to call display method
    }
}
